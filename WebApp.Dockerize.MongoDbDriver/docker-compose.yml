version: '3.8'

services:
  webapp230:
    build:
      context: ./WebApp.Dockerize.MongoDbDriver.230
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - MongoDb__ConnectionString=mongodb://mongodb:27017/
    depends_on:
      - mongodb
    networks:
      - app-network
  
  webapp343:
    build:
      context: ./WebApp.Dockerize.MongoDbDriver.3xx
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - MongoDb__ConnectionString=mongodb://mongodb:27017/
    depends_on:
      - mongodb
    networks:
      - app-network

  mongodb:
    image: mongo:8.0.12
    command: >
      bash -c "
        mongod --replSet rs-local --bind_ip_all --port 27017 --fork --logpath /var/log/mongodb.log &&
        until mongosh --eval 'print(\"MongoDB estÃ¡ listo\")' > /dev/null 2>&1; do sleep 2; done &&
        mongosh --eval '
          try {
            rs.status();
            print(\"Replica set ya inicializado\");
          } catch (e) {
            rs.initiate({
              _id: \"rs-local\",
              members: [
                { _id: 0, host: \"mongodb:27017\" }
              ]
            });
            print(\"Replica set rs-local inicializado\");
          }
        ' &&
        tail -f /var/log/mongodb.log
      "
    container_name: mongodbDockerizeApp
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: test
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network

volumes:
  mongodb_data:

networks:
  app-network:
    driver: bridge
